{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract FundMe {\n    // 1. 创建一个收款函数\n    // 2. 记录投资人并且查看\n    // 3. 在锁定期内，达到目标值，生产商可以提款\n    // 4. 在锁定期内，没有达到目标值，投资人在锁定期以后退款\n\n    uint256 constant MINIMUM_AMOUNT = 100 * 10**18;\n    \n    uint256 constant TARGET = 1000 * 10 ** 18;\n\n    mapping(address => uint256) public fundersToAmount;\n\n    address public owner;\n\n    uint256 deployTimeStamp;\n    uint256 lockTime;\n\n    address erc20Addr;\n\n    bool public getFundSuccess = false;\n    AggregatorV3Interface public dataFeed;\n\n\n    constructor(uint256 _lockTime, address dataFeedAddr) {\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\n        owner = msg.sender;\n        deployTimeStamp = block.timestamp;\n        lockTime = _lockTime;\n    }\n\n    function getChainlinkDataFeedLatestAnswer() public view returns (int256) {\n        // prettier-ignore\n        (\n            /* uint80 roundId */,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    function fund() external payable {\n        require(convertEthToUsd(msg.value) >= MINIMUM_AMOUNT, \"send more eth\");\n        require(block.timestamp < deployTimeStamp + lockTime, \"window is closed\");\n        fundersToAmount[msg.sender] = msg.value;\n    }\n\n    function convertEthToUsd(uint256 ethAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return (ethAmount * ethPrice) / 10**8;\n    }\n\n    function getFund() external payable windowClose onlyOwner{\n        require(convertEthToUsd(address(this).balance) >= TARGET, \"Targer is not reached\");\n        //transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        //send\n        // bool success = payable(msg.sender).send(address(this).balance);\n        // require(success, \"tx failed\");\n        //call\n        bool success;\n        (success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(success, \"transfer tx failed\");\n        fundersToAmount[msg.sender] = 0;\n        getFundSuccess = true;\n    }\n\n    function refund() external payable windowClose{\n        require(convertEthToUsd(address(this).balance) < TARGET, \"Targer is not reached\");\n        require(fundersToAmount[msg.sender] > 0, \"thers is no fund for you\");\n        bool success;\n        (success, ) = payable(msg.sender).call{value: fundersToAmount[msg.sender]}(\"\");\n        require(success, \"transfer tx failed\");\n        fundersToAmount[msg.sender] = 0;\n    }\n\n    function setFunderToAmount(address funder, uint256 amountToUpdate) external {\n        require(msg.sender == erc20Addr, \"only erc20 contract can call this function\");\n        fundersToAmount[funder] = amountToUpdate;\n    }\n\n    function setErc20Addr(address _erc20Addr) public onlyOwner{\n        erc20Addr = _erc20Addr;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner{\n        owner = newOwner;\n    }\n\n    modifier windowClose() {\n        require(block.timestamp >= deployTimeStamp + lockTime, \"window is not closed\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"this function can only be called by owner\");\n        _;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}